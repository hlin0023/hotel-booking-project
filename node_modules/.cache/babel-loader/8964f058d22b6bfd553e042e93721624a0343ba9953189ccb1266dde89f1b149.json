{"ast":null,"code":"// In App.js, update the calculateAvailability function:\nconst calculateAvailability = () => {\n  const singleRooms = rooms.filter(r => r.roomType === 'single');\n  const doubleRooms = rooms.filter(r => r.roomType === 'double');\n\n  // Helper function to check if a room is booked for ANY overlapping dates\n  const isRoomBooked = (room, checkIn, checkOut) => {\n    return room.bookings.some(booking => {\n      const bookingStart = new Date(booking.checkIn);\n      const bookingEnd = new Date(booking.checkOut);\n      const requestedStart = new Date(checkIn);\n      const requestedEnd = new Date(checkOut);\n      return requestedStart >= bookingStart && requestedStart < bookingEnd || requestedEnd > bookingStart && requestedEnd <= bookingEnd || requestedStart <= bookingStart && requestedEnd >= bookingEnd;\n    });\n  };\n  return {\n    single: {\n      total: singleRooms.length,\n      booked: singleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      vacant: singleRooms.length - singleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      rooms: singleRooms.map(r => ({\n        number: r.roomNumber,\n        isBooked: isRoomBooked(r, selectedDate, selectedDate)\n      }))\n    },\n    double: {\n      total: doubleRooms.length,\n      booked: doubleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      vacant: doubleRooms.length - doubleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      rooms: doubleRooms.map(r => ({\n        number: r.roomNumber,\n        isBooked: isRoomBooked(r, selectedDate, selectedDate)\n      }))\n    }\n  };\n};","map":{"version":3,"names":["calculateAvailability","singleRooms","rooms","filter","r","roomType","doubleRooms","isRoomBooked","room","checkIn","checkOut","bookings","some","booking","bookingStart","Date","bookingEnd","requestedStart","requestedEnd","single","total","length","booked","selectedDate","vacant","map","number","roomNumber","isBooked","double"],"sources":["/Users/lin/Desktop/Bookingsystem/src/App.js"],"sourcesContent":["// In App.js, update the calculateAvailability function:\nconst calculateAvailability = () => {\n  const singleRooms = rooms.filter(r => r.roomType === 'single');\n  const doubleRooms = rooms.filter(r => r.roomType === 'double');\n  \n  // Helper function to check if a room is booked for ANY overlapping dates\n  const isRoomBooked = (room, checkIn, checkOut) => {\n    return room.bookings.some(booking => {\n      const bookingStart = new Date(booking.checkIn);\n      const bookingEnd = new Date(booking.checkOut);\n      const requestedStart = new Date(checkIn);\n      const requestedEnd = new Date(checkOut);\n      \n      return (\n        (requestedStart >= bookingStart && requestedStart < bookingEnd) ||\n        (requestedEnd > bookingStart && requestedEnd <= bookingEnd) ||\n        (requestedStart <= bookingStart && requestedEnd >= bookingEnd)\n      );\n    });\n  };\n\n  return {\n    single: {\n      total: singleRooms.length,\n      booked: singleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      vacant: singleRooms.length - singleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      rooms: singleRooms.map(r => ({\n        number: r.roomNumber,\n        isBooked: isRoomBooked(r, selectedDate, selectedDate)\n      }))\n    },\n    double: {\n      total: doubleRooms.length,\n      booked: doubleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      vacant: doubleRooms.length - doubleRooms.filter(r => isRoomBooked(r, selectedDate, selectedDate)).length,\n      rooms: doubleRooms.map(r => ({\n        number: r.roomNumber,\n        isBooked: isRoomBooked(r, selectedDate, selectedDate)\n      }))\n    }\n  };\n};"],"mappings":"AAAA;AACA,MAAMA,qBAAqB,GAAGA,CAAA,KAAM;EAClC,MAAMC,WAAW,GAAGC,KAAK,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK,QAAQ,CAAC;EAC9D,MAAMC,WAAW,GAAGJ,KAAK,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK,QAAQ,CAAC;;EAE9D;EACA,MAAME,YAAY,GAAGA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,KAAK;IAChD,OAAOF,IAAI,CAACG,QAAQ,CAACC,IAAI,CAACC,OAAO,IAAI;MACnC,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAACF,OAAO,CAACJ,OAAO,CAAC;MAC9C,MAAMO,UAAU,GAAG,IAAID,IAAI,CAACF,OAAO,CAACH,QAAQ,CAAC;MAC7C,MAAMO,cAAc,GAAG,IAAIF,IAAI,CAACN,OAAO,CAAC;MACxC,MAAMS,YAAY,GAAG,IAAIH,IAAI,CAACL,QAAQ,CAAC;MAEvC,OACGO,cAAc,IAAIH,YAAY,IAAIG,cAAc,GAAGD,UAAU,IAC7DE,YAAY,GAAGJ,YAAY,IAAII,YAAY,IAAIF,UAAW,IAC1DC,cAAc,IAAIH,YAAY,IAAII,YAAY,IAAIF,UAAW;IAElE,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLG,MAAM,EAAE;MACNC,KAAK,EAAEnB,WAAW,CAACoB,MAAM;MACzBC,MAAM,EAAErB,WAAW,CAACE,MAAM,CAACC,CAAC,IAAIG,YAAY,CAACH,CAAC,EAAEmB,YAAY,EAAEA,YAAY,CAAC,CAAC,CAACF,MAAM;MACnFG,MAAM,EAAEvB,WAAW,CAACoB,MAAM,GAAGpB,WAAW,CAACE,MAAM,CAACC,CAAC,IAAIG,YAAY,CAACH,CAAC,EAAEmB,YAAY,EAAEA,YAAY,CAAC,CAAC,CAACF,MAAM;MACxGnB,KAAK,EAAED,WAAW,CAACwB,GAAG,CAACrB,CAAC,KAAK;QAC3BsB,MAAM,EAAEtB,CAAC,CAACuB,UAAU;QACpBC,QAAQ,EAAErB,YAAY,CAACH,CAAC,EAAEmB,YAAY,EAAEA,YAAY;MACtD,CAAC,CAAC;IACJ,CAAC;IACDM,MAAM,EAAE;MACNT,KAAK,EAAEd,WAAW,CAACe,MAAM;MACzBC,MAAM,EAAEhB,WAAW,CAACH,MAAM,CAACC,CAAC,IAAIG,YAAY,CAACH,CAAC,EAAEmB,YAAY,EAAEA,YAAY,CAAC,CAAC,CAACF,MAAM;MACnFG,MAAM,EAAElB,WAAW,CAACe,MAAM,GAAGf,WAAW,CAACH,MAAM,CAACC,CAAC,IAAIG,YAAY,CAACH,CAAC,EAAEmB,YAAY,EAAEA,YAAY,CAAC,CAAC,CAACF,MAAM;MACxGnB,KAAK,EAAEI,WAAW,CAACmB,GAAG,CAACrB,CAAC,KAAK;QAC3BsB,MAAM,EAAEtB,CAAC,CAACuB,UAAU;QACpBC,QAAQ,EAAErB,YAAY,CAACH,CAAC,EAAEmB,YAAY,EAAEA,YAAY;MACtD,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}