{"ast":null,"code":"var _jsxFileName = \"/Users/lin/Desktop/Bookingsystem/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { format } from 'date-fns';\nimport RoomDashboard from './components/RoomDashboard';\nimport BookingForm from './components/BookingForm';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialize rooms with proper numbering\n  const initialRooms = [{\n    roomNumber: 101,\n    roomType: 'single',\n    bookings: []\n  }, {\n    roomNumber: 102,\n    roomType: 'single',\n    bookings: []\n  }, {\n    roomNumber: 103,\n    roomType: 'single',\n    bookings: []\n  }, {\n    roomNumber: 104,\n    roomType: 'single',\n    bookings: []\n  }, {\n    roomNumber: 105,\n    roomType: 'single',\n    bookings: []\n  }, {\n    roomNumber: 106,\n    roomType: 'single',\n    bookings: []\n  }, {\n    roomNumber: 107,\n    roomType: 'single',\n    bookings: []\n  }, {\n    roomNumber: 201,\n    roomType: 'double',\n    bookings: []\n  }, {\n    roomNumber: 202,\n    roomType: 'double',\n    bookings: []\n  }, {\n    roomNumber: 203,\n    roomType: 'double',\n    bookings: []\n  }];\n  const [rooms, setRooms] = useState(initialRooms);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // Calculate availability for the selected date\n  const calculateAvailability = () => {\n    const dateStr = format(selectedDate, 'yyyy-MM-dd');\n    const singleRooms = rooms.filter(r => r.roomType === 'single');\n    const doubleRooms = rooms.filter(r => r.roomType === 'double');\n    const isRoomBooked = room => room.bookings.some(booking => booking.checkIn <= dateStr && booking.checkOut > dateStr);\n    return {\n      single: {\n        total: singleRooms.length,\n        booked: singleRooms.filter(isRoomBooked).length,\n        vacant: singleRooms.length - singleRooms.filter(isRoomBooked).length,\n        rooms: singleRooms.map(r => ({\n          number: r.roomNumber,\n          isBooked: isRoomBooked(r)\n        }))\n      },\n      double: {\n        total: doubleRooms.length,\n        booked: doubleRooms.filter(isRoomBooked).length,\n        vacant: doubleRooms.length - doubleRooms.filter(isRoomBooked).length,\n        rooms: doubleRooms.map(r => ({\n          number: r.roomNumber,\n          isBooked: isRoomBooked(r)\n        }))\n      }\n    };\n  };\n  const availability = calculateAvailability();\n\n  // Handle new booking\n  const handleNewBooking = bookingData => {\n    const {\n      roomNumber,\n      checkIn,\n      checkOut,\n      guestName,\n      guestEmail\n    } = bookingData;\n    const updatedRooms = rooms.map(room => room.roomNumber === roomNumber ? {\n      ...room,\n      bookings: [...room.bookings, {\n        checkIn,\n        checkOut,\n        guestName,\n        guestEmail\n      }]\n    } : room);\n    setRooms(updatedRooms);\n    return {\n      success: true,\n      message: `Booking successful for Room ${roomNumber}!`\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hotel Reservation System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Manage bookings and check room availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"(by Harrison Lin)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(RoomDashboard, {\n        availability: availability,\n        selectedDate: selectedDate,\n        onDateChange: setSelectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BookingForm, {\n        onBookRoom: handleNewBooking,\n        availability: availability,\n        selectedDate: selectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yHuKVGO+WLMdR95hOSoNT22QJpM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","format","RoomDashboard","BookingForm","jsxDEV","_jsxDEV","App","_s","initialRooms","roomNumber","roomType","bookings","rooms","setRooms","selectedDate","setSelectedDate","Date","calculateAvailability","dateStr","singleRooms","filter","r","doubleRooms","isRoomBooked","room","some","booking","checkIn","checkOut","single","total","length","booked","vacant","map","number","isBooked","double","availability","handleNewBooking","bookingData","guestName","guestEmail","updatedRooms","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDateChange","onBookRoom","_c","$RefreshReg$"],"sources":["/Users/lin/Desktop/Bookingsystem/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { format } from 'date-fns';\nimport RoomDashboard from './components/RoomDashboard';\nimport BookingForm from './components/BookingForm';\nimport './App.css';\n\nfunction App() {\n  // Initialize rooms with proper numbering\n  const initialRooms = [\n    { roomNumber: 101, roomType: 'single', bookings: [] },\n    { roomNumber: 102, roomType: 'single', bookings: [] },\n    { roomNumber: 103, roomType: 'single', bookings: [] },\n    { roomNumber: 104, roomType: 'single', bookings: [] },\n    { roomNumber: 105, roomType: 'single', bookings: [] },\n    { roomNumber: 106, roomType: 'single', bookings: [] },\n    { roomNumber: 107, roomType: 'single', bookings: [] },\n    { roomNumber: 201, roomType: 'double', bookings: [] },\n    { roomNumber: 202, roomType: 'double', bookings: [] },\n    { roomNumber: 203, roomType: 'double', bookings: [] }\n  ];\n\n  const [rooms, setRooms] = useState(initialRooms);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // Calculate availability for the selected date\n  const calculateAvailability = () => {\n    const dateStr = format(selectedDate, 'yyyy-MM-dd');\n    \n    const singleRooms = rooms.filter(r => r.roomType === 'single');\n    const doubleRooms = rooms.filter(r => r.roomType === 'double');\n    \n    const isRoomBooked = (room) => \n      room.bookings.some(booking => \n        booking.checkIn <= dateStr && \n        booking.checkOut > dateStr\n      );\n    \n    return {\n      single: {\n        total: singleRooms.length,\n        booked: singleRooms.filter(isRoomBooked).length,\n        vacant: singleRooms.length - singleRooms.filter(isRoomBooked).length,\n        rooms: singleRooms.map(r => ({\n          number: r.roomNumber,\n          isBooked: isRoomBooked(r)\n        }))\n      },\n      double: {\n        total: doubleRooms.length,\n        booked: doubleRooms.filter(isRoomBooked).length,\n        vacant: doubleRooms.length - doubleRooms.filter(isRoomBooked).length,\n        rooms: doubleRooms.map(r => ({\n          number: r.roomNumber,\n          isBooked: isRoomBooked(r)\n        }))\n      }\n    };\n  };\n\n  const availability = calculateAvailability();\n\n  // Handle new booking\n  const handleNewBooking = (bookingData) => {\n    const { roomNumber, checkIn, checkOut, guestName, guestEmail } = bookingData;\n    \n    const updatedRooms = rooms.map(room => \n      room.roomNumber === roomNumber\n        ? {\n            ...room,\n            bookings: [\n              ...room.bookings,\n              { checkIn, checkOut, guestName, guestEmail }\n            ]\n          }\n        : room\n    );\n\n    setRooms(updatedRooms);\n    return { success: true, message: `Booking successful for Room ${roomNumber}!` };\n  };\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Hotel Reservation System</h1>\n        <p>Manage bookings and check room availability</p>\n        <p>(by Harrison Lin)</p>\n      </header>\n      \n      <main>\n        <RoomDashboard \n          availability={availability} \n          selectedDate={selectedDate}\n          onDateChange={setSelectedDate}\n        />\n        <BookingForm \n          onBookRoom={handleNewBooking}\n          availability={availability}\n          selectedDate={selectedDate}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}