{"ast":null,"code":"var _jsxFileName = \"/Users/lin/Desktop/Bookingsystem/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { format } from 'date-fns';\nimport RoomDashboard from './components/RoomDashboard';\nimport BookingForm from './components/BookingForm';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialize rooms data (7 singles, 3 doubles)\n  const initialRooms = [];\n  for (let i = 1; i <= 7; i++) {\n    initialRooms.push({\n      roomNumber: i,\n      roomType: 'single',\n      bookings: []\n    });\n  }\n  for (let i = 8; i <= 10; i++) {\n    initialRooms.push({\n      roomNumber: i,\n      roomType: 'double',\n      bookings: []\n    });\n  }\n  const [rooms, setRooms] = useState(initialRooms);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // Calculate availability for the selected date\n  const calculateAvailability = () => {\n    const dateStr = format(selectedDate, 'yyyy-MM-dd');\n    const singleRooms = rooms.filter(r => r.roomType === 'single');\n    const doubleRooms = rooms.filter(r => r.roomType === 'double');\n    const isRoomBooked = room => room.bookings.some(booking => booking.checkIn <= dateStr && booking.checkOut > dateStr);\n    return {\n      single: {\n        total: singleRooms.length,\n        booked: singleRooms.filter(isRoomBooked).length,\n        vacant: singleRooms.length - singleRooms.filter(isRoomBooked).length\n      },\n      double: {\n        total: doubleRooms.length,\n        booked: doubleRooms.filter(isRoomBooked).length,\n        vacant: doubleRooms.length - doubleRooms.filter(isRoomBooked).length\n      }\n    };\n  };\n  const availability = calculateAvailability();\n\n  // Handle new booking\n  const handleNewBooking = bookingData => {\n    const {\n      roomType,\n      checkIn,\n      checkOut,\n      guestName,\n      guestEmail\n    } = bookingData;\n\n    // Find available room of requested type\n    const availableRoom = rooms.find(room => room.roomType === roomType && !room.bookings.some(booking => booking.checkIn < checkOut && booking.checkOut > checkIn));\n    if (!availableRoom) {\n      return {\n        success: false,\n        message: 'No available rooms'\n      };\n    }\n\n    // Add booking to the room\n    const updatedRooms = rooms.map(room => room.roomNumber === availableRoom.roomNumber ? {\n      ...room,\n      bookings: [...room.bookings, {\n        checkIn,\n        checkOut,\n        guestName,\n        guestEmail\n      }]\n    } : room);\n    setRooms(updatedRooms);\n    return {\n      success: true,\n      message: 'Booking successful!'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hotel Reservation System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Manage bookings and check room availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"by Harrison Lin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(RoomDashboard, {\n        availability: availability,\n        selectedDate: selectedDate,\n        onDateChange: setSelectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BookingForm, {\n        onBookRoom: handleNewBooking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yHuKVGO+WLMdR95hOSoNT22QJpM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","format","RoomDashboard","BookingForm","jsxDEV","_jsxDEV","App","_s","initialRooms","i","push","roomNumber","roomType","bookings","rooms","setRooms","selectedDate","setSelectedDate","Date","calculateAvailability","dateStr","singleRooms","filter","r","doubleRooms","isRoomBooked","room","some","booking","checkIn","checkOut","single","total","length","booked","vacant","double","availability","handleNewBooking","bookingData","guestName","guestEmail","availableRoom","find","success","message","updatedRooms","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDateChange","onBookRoom","_c","$RefreshReg$"],"sources":["/Users/lin/Desktop/Bookingsystem/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { format } from 'date-fns';\nimport RoomDashboard from './components/RoomDashboard';\nimport BookingForm from './components/BookingForm';\nimport './App.css';\n\nfunction App() {\n  // Initialize rooms data (7 singles, 3 doubles)\n  const initialRooms = [];\n  for (let i = 1; i <= 7; i++) {\n    initialRooms.push({ \n      roomNumber: i, \n      roomType: 'single', \n      bookings: [] \n    });\n  }\n  for (let i = 8; i <= 10; i++) {\n    initialRooms.push({ \n      roomNumber: i, \n      roomType: 'double', \n      bookings: [] \n    });\n  }\n\n  const [rooms, setRooms] = useState(initialRooms);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // Calculate availability for the selected date\n  const calculateAvailability = () => {\n    const dateStr = format(selectedDate, 'yyyy-MM-dd');\n    \n    const singleRooms = rooms.filter(r => r.roomType === 'single');\n    const doubleRooms = rooms.filter(r => r.roomType === 'double');\n    \n    const isRoomBooked = (room) => \n      room.bookings.some(booking => \n        booking.checkIn <= dateStr && \n        booking.checkOut > dateStr\n      );\n    \n    return {\n      single: {\n        total: singleRooms.length,\n        booked: singleRooms.filter(isRoomBooked).length,\n        vacant: singleRooms.length - singleRooms.filter(isRoomBooked).length\n      },\n      double: {\n        total: doubleRooms.length,\n        booked: doubleRooms.filter(isRoomBooked).length,\n        vacant: doubleRooms.length - doubleRooms.filter(isRoomBooked).length\n      }\n    };\n  };\n\n  const availability = calculateAvailability();\n\n  // Handle new booking\n  const handleNewBooking = (bookingData) => {\n    const { roomType, checkIn, checkOut, guestName, guestEmail } = bookingData;\n    \n    // Find available room of requested type\n    const availableRoom = rooms.find(room => \n      room.roomType === roomType &&\n      !room.bookings.some(booking => \n        booking.checkIn < checkOut && \n        booking.checkOut > checkIn\n      )\n    );\n\n    if (!availableRoom) {\n      return { success: false, message: 'No available rooms' };\n    }\n\n    // Add booking to the room\n    const updatedRooms = rooms.map(room => \n      room.roomNumber === availableRoom.roomNumber\n        ? {\n            ...room,\n            bookings: [\n              ...room.bookings,\n              { checkIn, checkOut, guestName, guestEmail }\n            ]\n          }\n        : room\n    );\n\n    setRooms(updatedRooms);\n    return { success: true, message: 'Booking successful!' };\n  };\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Hotel Reservation System</h1>\n        <p>Manage bookings and check room availability</p>\n        <p>by Harrison Lin</p>\n      </header>\n      \n      <main>\n        <RoomDashboard \n          availability={availability} \n          selectedDate={selectedDate}\n          onDateChange={setSelectedDate}\n        />\n        <BookingForm onBookRoom={handleNewBooking} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAMC,YAAY,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3BD,YAAY,CAACE,IAAI,CAAC;MAChBC,UAAU,EAAEF,CAAC;MACbG,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ;EACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC5BD,YAAY,CAACE,IAAI,CAAC;MAChBC,UAAU,EAAEF,CAAC;MACbG,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACQ,YAAY,CAAC;EAChD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,IAAIkB,IAAI,CAAC,CAAC,CAAC;;EAE5D;EACA,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,OAAO,GAAGnB,MAAM,CAACe,YAAY,EAAE,YAAY,CAAC;IAElD,MAAMK,WAAW,GAAGP,KAAK,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACX,QAAQ,KAAK,QAAQ,CAAC;IAC9D,MAAMY,WAAW,GAAGV,KAAK,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACX,QAAQ,KAAK,QAAQ,CAAC;IAE9D,MAAMa,YAAY,GAAIC,IAAI,IACxBA,IAAI,CAACb,QAAQ,CAACc,IAAI,CAACC,OAAO,IACxBA,OAAO,CAACC,OAAO,IAAIT,OAAO,IAC1BQ,OAAO,CAACE,QAAQ,GAAGV,OACrB,CAAC;IAEH,OAAO;MACLW,MAAM,EAAE;QACNC,KAAK,EAAEX,WAAW,CAACY,MAAM;QACzBC,MAAM,EAAEb,WAAW,CAACC,MAAM,CAACG,YAAY,CAAC,CAACQ,MAAM;QAC/CE,MAAM,EAAEd,WAAW,CAACY,MAAM,GAAGZ,WAAW,CAACC,MAAM,CAACG,YAAY,CAAC,CAACQ;MAChE,CAAC;MACDG,MAAM,EAAE;QACNJ,KAAK,EAAER,WAAW,CAACS,MAAM;QACzBC,MAAM,EAAEV,WAAW,CAACF,MAAM,CAACG,YAAY,CAAC,CAACQ,MAAM;QAC/CE,MAAM,EAAEX,WAAW,CAACS,MAAM,GAAGT,WAAW,CAACF,MAAM,CAACG,YAAY,CAAC,CAACQ;MAChE;IACF,CAAC;EACH,CAAC;EAED,MAAMI,YAAY,GAAGlB,qBAAqB,CAAC,CAAC;;EAE5C;EACA,MAAMmB,gBAAgB,GAAIC,WAAW,IAAK;IACxC,MAAM;MAAE3B,QAAQ;MAAEiB,OAAO;MAAEC,QAAQ;MAAEU,SAAS;MAAEC;IAAW,CAAC,GAAGF,WAAW;;IAE1E;IACA,MAAMG,aAAa,GAAG5B,KAAK,CAAC6B,IAAI,CAACjB,IAAI,IACnCA,IAAI,CAACd,QAAQ,KAAKA,QAAQ,IAC1B,CAACc,IAAI,CAACb,QAAQ,CAACc,IAAI,CAACC,OAAO,IACzBA,OAAO,CAACC,OAAO,GAAGC,QAAQ,IAC1BF,OAAO,CAACE,QAAQ,GAAGD,OACrB,CACF,CAAC;IAED,IAAI,CAACa,aAAa,EAAE;MAClB,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAqB,CAAC;IAC1D;;IAEA;IACA,MAAMC,YAAY,GAAGhC,KAAK,CAACiC,GAAG,CAACrB,IAAI,IACjCA,IAAI,CAACf,UAAU,KAAK+B,aAAa,CAAC/B,UAAU,GACxC;MACE,GAAGe,IAAI;MACPb,QAAQ,EAAE,CACR,GAAGa,IAAI,CAACb,QAAQ,EAChB;QAAEgB,OAAO;QAAEC,QAAQ;QAAEU,SAAS;QAAEC;MAAW,CAAC;IAEhD,CAAC,GACDf,IACN,CAAC;IAEDX,QAAQ,CAAC+B,YAAY,CAAC;IACtB,OAAO;MAAEF,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAsB,CAAC;EAC1D,CAAC;EAED,oBACExC,OAAA;IAAK2C,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB5C,OAAA;MAAA4C,QAAA,gBACE5C,OAAA;QAAA4C,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjChD,OAAA;QAAA4C,QAAA,EAAG;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAClDhD,OAAA;QAAA4C,QAAA,EAAG;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC,eAEThD,OAAA;MAAA4C,QAAA,gBACE5C,OAAA,CAACH,aAAa;QACZmC,YAAY,EAAEA,YAAa;QAC3BrB,YAAY,EAAEA,YAAa;QAC3BsC,YAAY,EAAErC;MAAgB;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eACFhD,OAAA,CAACF,WAAW;QAACoD,UAAU,EAAEjB;MAAiB;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAC9C,EAAA,CAtGQD,GAAG;AAAAkD,EAAA,GAAHlD,GAAG;AAwGZ,eAAeA,GAAG;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}