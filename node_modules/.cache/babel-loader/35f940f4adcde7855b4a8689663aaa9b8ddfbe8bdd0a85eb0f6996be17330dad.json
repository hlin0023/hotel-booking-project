{"ast":null,"code":"// In BookingForm.js, update the checkAvailability function:\nconst checkAvailability = () => {\n  if (!formData.checkIn || !formData.checkOut) {\n    setMessage('Please select dates');\n    return;\n  }\n  if (new Date(formData.checkIn) >= new Date(formData.checkOut)) {\n    setMessage('Check-out must be after check-in');\n    return;\n  }\n\n  // Get all rooms of selected type\n  const allRooms = availability[formData.roomType].rooms;\n\n  // Check availability for each room\n  const availableRooms = allRooms.filter(room => {\n    const roomData = rooms.find(r => r.roomNumber === room.number);\n    if (!roomData) return false;\n\n    // Check if room is booked for ANY overlapping dates\n    return !roomData.bookings.some(booking => {\n      const bookingStart = new Date(booking.checkIn);\n      const bookingEnd = new Date(booking.checkOut);\n      const requestedStart = new Date(formData.checkIn);\n      const requestedEnd = new Date(formData.checkOut);\n      return requestedStart >= bookingStart && requestedStart < bookingEnd || requestedEnd > bookingStart && requestedEnd <= bookingEnd || requestedStart <= bookingStart && requestedEnd >= bookingEnd;\n    });\n  });\n  setAvailableRooms(availableRooms);\n  setMessage(availableRooms.length > 0 ? `${availableRooms.length} ${formData.roomType} room(s) available!` : `No ${formData.roomType} rooms available for these dates`);\n};","map":{"version":3,"names":["checkAvailability","formData","checkIn","checkOut","setMessage","Date","allRooms","availability","roomType","rooms","availableRooms","filter","room","roomData","find","r","roomNumber","number","bookings","some","booking","bookingStart","bookingEnd","requestedStart","requestedEnd","setAvailableRooms","length"],"sources":["/Users/lin/Desktop/Bookingsystem/src/components/BookingForm.js"],"sourcesContent":["// In BookingForm.js, update the checkAvailability function:\nconst checkAvailability = () => {\n  if (!formData.checkIn || !formData.checkOut) {\n    setMessage('Please select dates');\n    return;\n  }\n  \n  if (new Date(formData.checkIn) >= new Date(formData.checkOut)) {\n    setMessage('Check-out must be after check-in');\n    return;\n  }\n\n  // Get all rooms of selected type\n  const allRooms = availability[formData.roomType].rooms;\n  \n  // Check availability for each room\n  const availableRooms = allRooms.filter(room => {\n    const roomData = rooms.find(r => r.roomNumber === room.number);\n    if (!roomData) return false;\n    \n    // Check if room is booked for ANY overlapping dates\n    return !roomData.bookings.some(booking => {\n      const bookingStart = new Date(booking.checkIn);\n      const bookingEnd = new Date(booking.checkOut);\n      const requestedStart = new Date(formData.checkIn);\n      const requestedEnd = new Date(formData.checkOut);\n      \n      return (\n        (requestedStart >= bookingStart && requestedStart < bookingEnd) ||\n        (requestedEnd > bookingStart && requestedEnd <= bookingEnd) ||\n        (requestedStart <= bookingStart && requestedEnd >= bookingEnd)\n      );\n    });\n  });\n\n  setAvailableRooms(availableRooms);\n  setMessage(availableRooms.length > 0 \n    ? `${availableRooms.length} ${formData.roomType} room(s) available!` \n    : `No ${formData.roomType} rooms available for these dates`\n  );\n};"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,IAAI,CAACC,QAAQ,CAACC,OAAO,IAAI,CAACD,QAAQ,CAACE,QAAQ,EAAE;IAC3CC,UAAU,CAAC,qBAAqB,CAAC;IACjC;EACF;EAEA,IAAI,IAAIC,IAAI,CAACJ,QAAQ,CAACC,OAAO,CAAC,IAAI,IAAIG,IAAI,CAACJ,QAAQ,CAACE,QAAQ,CAAC,EAAE;IAC7DC,UAAU,CAAC,kCAAkC,CAAC;IAC9C;EACF;;EAEA;EACA,MAAME,QAAQ,GAAGC,YAAY,CAACN,QAAQ,CAACO,QAAQ,CAAC,CAACC,KAAK;;EAEtD;EACA,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,MAAM,CAACC,IAAI,IAAI;IAC7C,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKJ,IAAI,CAACK,MAAM,CAAC;IAC9D,IAAI,CAACJ,QAAQ,EAAE,OAAO,KAAK;;IAE3B;IACA,OAAO,CAACA,QAAQ,CAACK,QAAQ,CAACC,IAAI,CAACC,OAAO,IAAI;MACxC,MAAMC,YAAY,GAAG,IAAIhB,IAAI,CAACe,OAAO,CAAClB,OAAO,CAAC;MAC9C,MAAMoB,UAAU,GAAG,IAAIjB,IAAI,CAACe,OAAO,CAACjB,QAAQ,CAAC;MAC7C,MAAMoB,cAAc,GAAG,IAAIlB,IAAI,CAACJ,QAAQ,CAACC,OAAO,CAAC;MACjD,MAAMsB,YAAY,GAAG,IAAInB,IAAI,CAACJ,QAAQ,CAACE,QAAQ,CAAC;MAEhD,OACGoB,cAAc,IAAIF,YAAY,IAAIE,cAAc,GAAGD,UAAU,IAC7DE,YAAY,GAAGH,YAAY,IAAIG,YAAY,IAAIF,UAAW,IAC1DC,cAAc,IAAIF,YAAY,IAAIG,YAAY,IAAIF,UAAW;IAElE,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFG,iBAAiB,CAACf,cAAc,CAAC;EACjCN,UAAU,CAACM,cAAc,CAACgB,MAAM,GAAG,CAAC,GAChC,GAAGhB,cAAc,CAACgB,MAAM,IAAIzB,QAAQ,CAACO,QAAQ,qBAAqB,GAClE,MAAMP,QAAQ,CAACO,QAAQ,kCAC3B,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}